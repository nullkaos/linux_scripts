#!/usr/bin/env bash
#
# network -- manage ethernet and wireless connections easily from the command line
# Copyright (C) 2010-2012  Alan SCHNEIDER
#                          <shk.schneider[at]gmail.com>
#
# This program comes with ABSOLUTELY NO WARRANTY.
# This is free software, and you are welcome to redistribute it
# under certain conditions.
#

[ `id -u` -ne 0 ] && echo "network: are you root, `id -un`?" >&2 && exit 1

[ -z "`which ifconfig`" ] && echo "network: command 'ifconfig' not found" >&2 && exit 1
[ -z "`which iwlist`" ] && echo "network: command 'iwlist' not found" >&2 && exit 1
[ -z "`which iwconfig`" ] && echo "network: command 'iwconfig' not found" >&2 && exit 1
[ -z "`which dhclient`" ] && echo "network: command 'dhclient' not found" >&2 && exit 1

# Usage

function usage() {
    echo "Usage: network devices                        list devices" >&2
    echo "               [eth|wlan|usb] list [up|down]  list interfaces" >&2
    echo "               [eth|wlan|usb] status          interfaces status" >&2
    echo "               <interface> up                 enable interface" >&2
    echo "               <interface> down               disable interface" >&2
    echo "               <interface> status             interface status" >&2
    echo "               <wlan> ssid                    list SSID for interface" >&2
    echo "               <wlan> connect <ssid> [key]    connect to SSID throught interface" >&2
    echo "               --help" >&2
    exit 1
}

# Utility

function exists() {
    [ -z "`ifconfig -a -s | egrep "^$1"`" ] && echo "no" || echo "yes"
}

function getStatus() {
    [ -z "`ifconfig -s | egrep "^$1"`" ] && echo "down" || echo "up"
}

function getType() {
    case $1 in
	eth*) echo "eth" ;;
	wlan*) echo "wlan" ;;
	usb*) echo "usb" ;;
    esac
}

function getIp() {
    echo $(ifconfig $1 | grep 'inet addr' | cut -d':' -f2 | cut -d' ' -f1)
}

function devices() {
    lspci -nn | egrep -i '(ethernet|wlan|wireless|wifi)' | cut -d' ' -f2- | sed -r 's/ \[[0-9a-fA-F:]+\]//g' | uniq
}

# Interfaces

function interfaces_list() {
    ifconfig -a -s | egrep '^(eth|wlan|usb)' | awk '{print $1}'
}

function interfaces_list_up() {
    ifconfig -s | egrep '^(eth|wlan|usb)' | awk '{print $1}'
}

function interfaces_list_down() {
    interfaces=$(ifconfig -a -s | egrep '^(eth|wlan|usb)' | awk '{print $1}')
    [ -z "$interfaces" ] && return
    for interface in $interfaces ; do
	[ `getStatus $interface` = "down" ] && echo "$interface"
    done
}

function interfaces_status() {
    interfaces=$(ifconfig -a -s | egrep '^(eth|wlan|usb)' | awk '{print $1}')
    [ -z "$interfaces" ] && return
    for interface in $interfaces ; do
	[ `getStatus $interface` = "up" ] && echo "$interface: UP "$(getIp $interface) || echo "$interface: DOWN"
    done
}

# Type-specific

function type_list() {
    interfaces=$(ifconfig -a -s | egrep "^$1" | awk '{print $1}')
    [ -z "$interfaces" ] && return
    for interface in $interfaces ; do
	[ `getType $interface` = "$1" ] && echo "$interface"
    done
}

function type_list_up() {
    interfaces=$(ifconfig -s | egrep "^$1" | awk '{print $1}')
    [ -z "$interfaces" ] && return
    for interface in $interfaces ; do
	[ `getType $interface` = "$1" ] && [ `getStatus $interface` = "up" ] && echo "$interface"
    done
}

function type_list_down() {
    interfaces=$(ifconfig -a -s | egrep "^$1" | awk '{print $1}')
    [ -z "$interfaces" ] && return
    for interface in $interfaces ; do
	[ `getType $interface` = "$1" ] && [ `getStatus $interface` = "down" ] && echo "$interface"
    done
}

function type_status() {
    interfaces=$(ifconfig -a -s | egrep "^$1" | awk '{print $1}')
    [ -z "$interfaces" ] && return
    for interface in $interfaces ; do
	[ `getStatus $interface` = "up" ] && echo "$interface: UP "$(getIp $interface) || echo "$interface: DOWN"
    done
}

# Interface-specific

function interface_up() {
    [ `exists $1` = "no" ] && echo "$1: no such interface" >&2 && return
    [ `getStatus $1` = "down" ] && echo "$1: enabling..." && ifconfig $1 up || echo "$1: interface is already UP"
}

function interface_down() {
    [ `exists $1` = "no" ] && echo "$1: no such interface" >&2 && return
    [ `getStatus $1` = "up" ] && echo "$1: disabling..." && ifconfig $1 down || echo "$1: interface is already DOWN"
}

function interface_status() {
    [ `exists $1` = "no" ] && echo "$1: no such interface" >&2 && return
    [ `getStatus $1` = "up" ] && echo "$1: UP "$(getIp $1) || echo "$1: DOWN"
}

# Wireless specific

function wlan_ssid() {
    [ `exists $1` = "no" ] && echo "$1: no such interface" >&2 && return
    [ `getStatus $1` = "down" ] && echo "$1: interface is DOWN" && return
    iwlist $1 scan | egrep '^ *ESSID' | sed -r 's/^\s+//' | grep -v 'ESSID:"' | cut -d'"' -f2
}

function wlan_connect() {
    [ `exists $1` = "no" ] && echo "$1: no such interface" >&2 && return
    [ `getStatus $1` = "down" ] && echo "$1: interface is DOWN" && return
    echo "$1: connecting to '$2'..."
    iwconfig $1 essid "$2" key "s:$3"
    echo "$1: obtaining IP address from '$2'..."
    dhclient $1
    status_single $1
}

# Main program

[ $# -eq 0 ] && usage
case "$1" in
    --help)
	[ $# -gt 1 ] && echo "network: unexpected argument '$2'" >&2 && exit
	usage ;;
    devices)
	[ $# -gt 1 ] && echo "network: unexpected argument '$2'" >&2 && exit
	devices ;;
    eth|wlan|usb)
	case "$2" in
	    list)
		if [ $# -eq 2 ] ; then
		    type_list $1
		else
		    [ $# -gt 3 ] && echo "network: unexpected argument '$4'" >&2 && exit
		    case "$3" in
			up) type_list_up $1 ;;
			down) type_list_down $1 ;;
			*) echo "network: unrecognized argument '$3'" >&2 && exit 1 ;;
		    esac
		fi
		;;
	    status)
		[ $# -gt 2 ] && echo "network: unexpected argument '$3'" >&2 && exit
		type_status $1 ;;
	    *) echo "network: unrecognized argument '$2'" >&2 && exit 1 ;;
	esac ;;
    list)
	if [ $# -eq 1 ] ; then
	    interfaces_list
	else
	    [ $# -gt 2 ] && echo "network: unexpected argument '$3'" >&2 && exit
	    case "$2" in
		up) interfaces_list_up ;;
		down) interfaces_list_down ;;
		*) echo "network: unrecognized argument '$2'" >&2 && exit 1 ;;
	    esac
	fi ;;
    status)
	[ $# -gt 1 ] && echo "network: unexpected argument '$2'" >&2 && exit
	interfaces_status ;;
    eth[0-9]|usb[0])
	[ $# -gt 2 ] && echo "network: unexpected argument '$3'" >&2 && exit
	case "$2" in
	    up) interface_up "$1" ;;
	    down) interface_down "$1" ;;
	    status) interface_status "$1" ;;
	    *) echo "network: unrecognized argument '$2'" >&2 && exit 1 ;;
	esac ;;
    wlan[0-9])
	[ $# -gt 2 ] && echo "network: unexpected argument '$3'" >&2 && exit
	case "$2" in
	    up) interface_up "$1" ;;
	    down)
		[ $# -gt 2 ] && echo "network: unexpected argument '$3'" >&2 && exit
		interface_down "$1" ;;
	    status)
		[ $# -gt 2 ] && echo "network: unexpected argument '$3'" >&2 && exit
		interface_status "$1" ;;
	    ssid)
		[ $# -gt 2 ] && echo "network: unexpected argument '$3'" >&2 && exit
		wlan_ssid "$1" ;;
	    connect)
		[ $# -eq 2 ] && echo "network: missing argument <ssid>" >&2 && exit 1
		[ $# -gt 4 ] && echo "network: unexpected argument '$5'" >&2 && exit
		wlan_connect "$1" "$2" "$3" ;;
	    *) echo "network: unrecognized argument '$2'" >&2 && exit 1 ;;
	esac ;;
    *) echo "network: unrecognized argument '$1'" >&2 && exit 1 ;;
esac

# EOF
