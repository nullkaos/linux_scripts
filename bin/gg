#!/bin/bash
#
# gg -- git branch manager updater
# Copyright (C) 2012  Alan "Shtark" SCHNEIDER
#                     <shk.schneider[at]gmail.com>
#
# Based on the model from Vincent Driessen
#                         <http://nvie.com/posts/a-successful-git-branching-model/>
#
# This program comes with ABSOLUTELY NO WARRANTY.
# This is free software, and you are welcome to redistribute it
# under certain conditions.
#

[ -z `which git` ] && echo "E: git: Command not found" >&2 && exit 1

function usage() {
    echo "Usage: gg" >&2
    exit 1
}

DIR=$(git rev-parse --git-dir 2>/dev/null)
[ -z "$DIR" ] && echo "gg: not a git repository" >&2 && exit 1

[ $# -ne 0 ] && usage

function git_status() {
    [ -n "`git status --porcelain`" ] && echo "gg: there are some things left to commit" >&2 && exit 1
}

function git_next_tag() {
    TAG=$(git tag | tail -1)
    [ -z "$TAG" ] && TAG="0.0"
    if [ -z "`echo $TAG | sed 's/[^\.]//g'`" ] ; then
	echo "$((${TAG##*.}+1))"
    else
	echo "${TAG%.*}.$((${TAG##*.}+1))"
    fi
}

CURRENT=$(git branch --no-color | egrep '^\*' | cut -d' ' -f2)
TYPE=$(echo $CURRENT | cut -d'-' -f1)
git_status

git fetch && git fetch --tags && git pull
git_status

case $TYPE in
    "master")
	REF=$(git log -n1 | head -1 | cut -d' ' -f2 | cut -c1-7)
	if [ -n "`git branch | egrep '^..hotfix$'`" ] ; then
	    echo "gg: merging from hotfix"
	    git checkout hotfix && git pull && git_status && git checkout master
	    git merge --no-ff hotfix && git_status
	fi
	if [ -n "`git branch | egrep '^..release$'`" ] ; then
	    echo "gg: merging from release"
	    git checkout release && git pull && git_status && git checkout master
	    git merge --no-ff release && git_status
	fi
	NEW_REF=$(git log -n1 | head -1 | cut -d' ' -f2 | cut -c1-7)
	if [ "$REF" != "$NEW_REF" ] ; then
	    echo "gg: new tag $TAG"
	    TAG=$(git_next_tag)
	    git tag -a "$TAG" -m "version $TAG"
	else
	    echo "gg: no changes to tag"
	fi
	;;
    "hotfix")
	REF=$(git log -n1 | head -1 | cut -d' ' -f2 | cut -c1-7)
	if [ -n "`git branch | egrep '^..master$'`" ] ; then
	    echo "gg: merging from master"
	    git checkout master && git pull && git_status && git checkout hotfix
	    git merge --no-ff master && git_status
	fi
	NEW_REF=$(git log -n1 | head -1 | cut -d' ' -f2 | cut -c1-7)
	if [ "$REF" != "$NEW_REF" ] ; then
	    echo "gg: new tag $TAG"
	    TAG=$(git_next_tag)
	    git tag -a "$TAG" -m "version $TAG"
	else
	    echo "gg: no changes to tag"
	fi
	;;
    "release")
	if [ -n "`git branch | egrep '^..hotfix$'`" ] ; then
	    git checkout hotfix && git pull && git_status && git checkout release
	    git merge --no-ff hotfix && git_status
	fi
	;;
    "development")
	if [ -n "`git branch | egrep '^..hotfix$'`" ] ; then
	    if [ -z "`git branch | egrep '^..release$'`" ] ; then
		git checkout hotfix && git pull && git_status && git checkout development
		git merge --no-ff hotfix && git_status
	    fi
	fi
	if [ -n "`git branch | egrep '^..release$'`" ] ; then
	    git checkout release && git pull && git_status && git checkout development
	    git merge --no-ff release && git_status
	fi
	if [ -n "`git branch | egrep '^..feature$'`" ] ; then
	    git checkout feature && git pull && git_status && git checkout development
	    git merge --no-ff feature && git_status
	fi
	;;
    "feature")
	;;
    *) echo "gg: $CURRENT branch not recognized" >&2 && exit 1 ;;
esac

# EOF
